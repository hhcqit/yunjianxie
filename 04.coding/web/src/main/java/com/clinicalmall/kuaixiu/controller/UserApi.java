/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.clinicalmall.kuaixiu.controller;

import com.clinicalmall.kuaixiu.vo.CommonResponse;
import com.clinicalmall.kuaixiu.vo.GetUserRequest;
import com.clinicalmall.kuaixiu.vo.GetUserResponse;
import com.clinicalmall.kuaixiu.vo.LoginRequest;
import com.clinicalmall.kuaixiu.vo.LoginResponse;
import com.clinicalmall.kuaixiu.vo.UserFindPwdRequest;
import com.clinicalmall.kuaixiu.vo.UserListRequest;
import com.clinicalmall.kuaixiu.vo.UserListResponse;
import com.clinicalmall.kuaixiu.vo.UserModifyHeadImgRequest;
import com.clinicalmall.kuaixiu.vo.UserModifyPwdRequest;
import com.clinicalmall.kuaixiu.vo.UserModifyRequest;
import com.clinicalmall.kuaixiu.vo.UserModifyTypeRequest;
import com.clinicalmall.kuaixiu.vo.UserRegisterRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@Api(value = "User", description = "the User API")
public interface UserApi {

    @ApiOperation(value = "找回密码", nickname = "findPwd", notes = "找回密码", response = CommonResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommonResponse.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/user/findPwd",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CommonResponse> findPwd(@ApiParam(value = "请求消息" ,required=true )  @Valid @RequestBody UserFindPwdRequest body);


    @ApiOperation(value = "获取用户列表", nickname = "getList", notes = "获取用户列表", response = UserListResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserListResponse.class) })
    @ApiImplicitParams({
    @ApiImplicitParam(name = "token", value = "token", required=true, dataType = "String", paramType = "header")
    })
    @RequestMapping(value = "/user/getList",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<UserListResponse> getList(@ApiParam(value = "token" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "请求消息" ,required=true )  @Valid @RequestBody UserListRequest body);


    @ApiOperation(value = "获取用户", nickname = "getUser", notes = "获取用户", response = GetUserResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetUserResponse.class) })
    @ApiImplicitParams({
    @ApiImplicitParam(name = "token", value = "token", required=true, dataType = "String", paramType = "header")
    })
    @RequestMapping(value = "/user/getUser",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<GetUserResponse> getUser(@ApiParam(value = "token" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "请求消息" ,required=true )  @Valid @RequestBody GetUserRequest body);


    @ApiOperation(value = "用户登录", nickname = "login", notes = "用户登录", response = LoginResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = LoginResponse.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/user/login",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<LoginResponse> login(@ApiParam(value = "登录请求消息" ,required=true )  @Valid @RequestBody LoginRequest body);


    @ApiOperation(value = "修改用户", nickname = "modify", notes = "修改用户", response = CommonResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommonResponse.class) })
    @ApiImplicitParams({
    @ApiImplicitParam(name = "token", value = "token", required=true, dataType = "String", paramType = "header")
    })
    @RequestMapping(value = "/user/modify",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CommonResponse> modify(@ApiParam(value = "token" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "请求消息" ,required=true )  @Valid @RequestBody UserModifyRequest body);


    @ApiOperation(value = "修改头像", nickname = "modifyHeadImg", notes = "修改头像", response = CommonResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommonResponse.class) })
    @ApiImplicitParams({
    @ApiImplicitParam(name = "token", value = "token", required=true, dataType = "String", paramType = "header")
    })
    @RequestMapping(value = "/user/modifyHeadImg",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CommonResponse> modifyHeadImg(@ApiParam(value = "token" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "请求消息" ,required=true )  @Valid @RequestBody UserModifyHeadImgRequest body);


    @ApiOperation(value = "修改密码", nickname = "modifyPwd", notes = "修改密码", response = CommonResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommonResponse.class) })
    @ApiImplicitParams({
    @ApiImplicitParam(name = "token", value = "token", required=true, dataType = "String", paramType = "header")
    })
    @RequestMapping(value = "/user/modifyPwd",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CommonResponse> modifyPwd(@ApiParam(value = "token" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "请求消息" ,required=true )  @Valid @RequestBody UserModifyPwdRequest body);


    @ApiOperation(value = "修改用户类型", nickname = "modifyType", notes = "修改用户类型", response = CommonResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommonResponse.class) })
    @ApiImplicitParams({
    @ApiImplicitParam(name = "token", value = "token", required=true, dataType = "String", paramType = "header")
    })
    @RequestMapping(value = "/user/modifyType",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CommonResponse> modifyType(@ApiParam(value = "token" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "请求消息" ,required=true )  @Valid @RequestBody UserModifyTypeRequest body);


    @ApiOperation(value = "用户注册", nickname = "register", notes = "用户注册", response = CommonResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommonResponse.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/user/register",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CommonResponse> register(@ApiParam(value = "注册请求消息" ,required=true )  @Valid @RequestBody UserRegisterRequest body);

}
